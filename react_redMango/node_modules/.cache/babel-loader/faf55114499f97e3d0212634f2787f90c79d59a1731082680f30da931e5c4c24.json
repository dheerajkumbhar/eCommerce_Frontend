{"ast":null,"code":"import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nconst shoppingCartApi = createApi({\n  reducerPath: \"shoppingCartApi\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: process.env.REACT_APP_API_URL,\n    prepareHeaders: (headers, api) => {\n      const token = localStorage.getItem(\"token\");\n      token && headers.append(\"Authorization\", \"Bearer \" + token);\n    }\n  }),\n  tagTypes: [\"ShoppingCarts\"],\n  endpoints: builder => ({\n    getShoppingCart: builder.query({\n      query: userId => ({\n        url: `shoppingcart`,\n        params: {\n          userId: userId\n        }\n      }),\n      providesTags: [\"ShoppingCarts\"]\n    }),\n    updateShoppingCart: builder.mutation({\n      query: ({\n        menuItemId,\n        updateQuantityBy,\n        userId\n      }) => ({\n        url: \"shoppingcart\",\n        method: \"POST\",\n        params: {\n          menuItemId,\n          updateQuantityBy,\n          userId\n        }\n      }),\n      invalidatesTags: [\"ShoppingCarts\"]\n    })\n  })\n});\nexport const {\n  useGetShoppingCartQuery,\n  useUpdateShoppingCartMutation\n} = shoppingCartApi;\nexport default shoppingCartApi;","map":{"version":3,"names":["createApi","fetchBaseQuery","shoppingCartApi","reducerPath","baseQuery","baseUrl","process","env","REACT_APP_API_URL","prepareHeaders","headers","api","token","localStorage","getItem","append","tagTypes","endpoints","builder","getShoppingCart","query","userId","url","params","providesTags","updateShoppingCart","mutation","menuItemId","updateQuantityBy","method","invalidatesTags","useGetShoppingCartQuery","useUpdateShoppingCartMutation"],"sources":["C:/redmango_frontend/react_redMango/src/Apis/shoppingCartApi.ts"],"sourcesContent":["import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\r\n\r\nconst shoppingCartApi = createApi({\r\n  reducerPath: \"shoppingCartApi\",\r\n  baseQuery: fetchBaseQuery({\r\n    baseUrl: process.env.REACT_APP_API_URL,\r\n    prepareHeaders: (headers: Headers, api) => {\r\n      const token = localStorage.getItem(\"token\");\r\n      token && headers.append(\"Authorization\", \"Bearer \" + token);\r\n    },\r\n  }),\r\n  tagTypes: [\"ShoppingCarts\"],\r\n  endpoints: (builder) => ({\r\n    getShoppingCart: builder.query({\r\n      query: (userId) => ({\r\n        url: `shoppingcart`,\r\n        params: {\r\n          userId: userId,\r\n        },\r\n      }),\r\n      providesTags: [\"ShoppingCarts\"],\r\n    }),\r\n    updateShoppingCart: builder.mutation({\r\n      query: ({ menuItemId, updateQuantityBy, userId }) => ({\r\n        url: \"shoppingcart\",\r\n        method: \"POST\",\r\n        params: {\r\n          menuItemId,\r\n          updateQuantityBy,\r\n          userId,\r\n        },\r\n      }),\r\n      invalidatesTags: [\"ShoppingCarts\"],\r\n    }),\r\n  }),\r\n});\r\n\r\nexport const { useGetShoppingCartQuery, useUpdateShoppingCartMutation } =\r\n  shoppingCartApi;\r\nexport default shoppingCartApi;\r\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,cAAc,QAAQ,8BAA8B;AAExE,MAAMC,eAAe,GAAGF,SAAS,CAAC;EAChCG,WAAW,EAAE,iBAAiB;EAC9BC,SAAS,EAAEH,cAAc,CAAC;IACxBI,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB;IACtCC,cAAc,EAAEA,CAACC,OAAgB,EAAEC,GAAG,KAAK;MACzC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3CF,KAAK,IAAIF,OAAO,CAACK,MAAM,CAAC,eAAe,EAAE,SAAS,GAAGH,KAAK,CAAC;IAC7D;EACF,CAAC,CAAC;EACFI,QAAQ,EAAE,CAAC,eAAe,CAAC;EAC3BC,SAAS,EAAGC,OAAO,KAAM;IACvBC,eAAe,EAAED,OAAO,CAACE,KAAK,CAAC;MAC7BA,KAAK,EAAGC,MAAM,KAAM;QAClBC,GAAG,EAAE,cAAc;QACnBC,MAAM,EAAE;UACNF,MAAM,EAAEA;QACV;MACF,CAAC,CAAC;MACFG,YAAY,EAAE,CAAC,eAAe;IAChC,CAAC,CAAC;IACFC,kBAAkB,EAAEP,OAAO,CAACQ,QAAQ,CAAC;MACnCN,KAAK,EAAEA,CAAC;QAAEO,UAAU;QAAEC,gBAAgB;QAAEP;MAAO,CAAC,MAAM;QACpDC,GAAG,EAAE,cAAc;QACnBO,MAAM,EAAE,MAAM;QACdN,MAAM,EAAE;UACNI,UAAU;UACVC,gBAAgB;UAChBP;QACF;MACF,CAAC,CAAC;MACFS,eAAe,EAAE,CAAC,eAAe;IACnC,CAAC;EACH,CAAC;AACH,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEC,uBAAuB;EAAEC;AAA8B,CAAC,GACrE9B,eAAe;AACjB,eAAeA,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}